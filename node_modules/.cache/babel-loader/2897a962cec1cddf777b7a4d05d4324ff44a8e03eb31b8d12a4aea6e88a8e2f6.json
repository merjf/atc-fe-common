{"ast":null,"code":"var _jsxFileName = \"/Users/merjf/Documents/Projects/accademic-tools-collector/atc-fe-common/src/components/MontecarloPokerSimulation/PokerTable.tsx\",\n  _s = $RefreshSig$();\nimport { Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport PlayingCard from \"./PlayingCard\";\nimport classnames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  boxTable: {\n    width: \"100%\",\n    minHeight: 400,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundPosition: \"center\",\n    position: \"relative\"\n  },\n  cards: {\n    display: \"flex\",\n    gap: 2,\n    position: \"absolute\"\n  },\n  mainPlayerCards: {\n    backgroundColor: \"orange\",\n    padding: 5,\n    borderRadius: 5\n  },\n  tableCards: {\n    display: \"flex\",\n    gap: 5,\n    position: \"absolute\",\n    top: \"41%\",\n    left: \"29%\"\n  }\n});\nconst locations = [{}];\nconst PokerTable = props => {\n  _s();\n  const classes = useStyles();\n  const mainPlayerCards = props.gameCards.mainPlayerCards;\n  const tableCards = props.gameCards.tableCards;\n  const otherPlayerCards = props.gameCards.otherPlayerCards;\n  const assignOtherPlayerCardsPosition = (areMainPlayerCards, otherPlayerNumber) => {\n    if (areMainPlayerCards) {\n      return {\n        bottom: 0,\n        left: \"42%\"\n      };\n    }\n    switch (otherPlayerNumber) {\n      case 1:\n        // dx center bottom\n        return {\n          bottom: 30,\n          left: \"62%\"\n        };\n      case 2:\n        // sx center bottom\n        return {\n          bottom: 30,\n          left: \"20%\"\n        };\n      case 3:\n        // sx center top\n        return {\n          top: 30,\n          left: \"30%\"\n        };\n      case 4:\n        // dx center top\n        return {\n          top: 30,\n          left: \"55%\"\n        };\n      case 5:\n        // sx bottom\n        return {\n          bottom: \"28%\",\n          left: 0\n        };\n      case 6:\n        // dx bottom\n        return {\n          bottom: \"28%\",\n          right: 0\n        };\n      case 7:\n        // dx top\n        return {\n          top: \"22%\",\n          right: 20\n        };\n      case 8:\n        // sx top\n        return {\n          top: \"22%\",\n          left: 20\n        };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.boxTable,\n    sx: {\n      backgroundImage: `url(${require(\"../../assets/images/poker-table.jpeg\")})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classnames(classes.cards, classes.mainPlayerCards),\n      style: assignOtherPlayerCardsPosition(true, 0),\n      children: [/*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: mainPlayerCards.cards[0].suit,\n        ranking: mainPlayerCards.cards[0].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: mainPlayerCards.cards[1].suit,\n        ranking: mainPlayerCards.cards[1].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), otherPlayerCards.map((otherPlayer, index) => /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.cards,\n      style: assignOtherPlayerCardsPosition(false, index + 1),\n      children: [/*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: otherPlayer.cards[0].suit,\n        ranking: otherPlayer.cards[0].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: otherPlayer.cards[1].suit,\n        ranking: otherPlayer.cards[1].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.tableCards,\n      children: [tableCards.flop.map((card, index) => /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: card.suit,\n        ranking: card.ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: tableCards.river.suit,\n        ranking: tableCards.river.ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: tableCards.turn.suit,\n        ranking: tableCards.turn.ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(PokerTable, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n_c = PokerTable;\nexport default PokerTable;\nvar _c;\n$RefreshReg$(_c, \"PokerTable\");","map":{"version":3,"names":["Box","makeStyles","PlayingCard","classnames","jsxDEV","_jsxDEV","useStyles","boxTable","width","minHeight","backgroundRepeat","backgroundSize","backgroundPosition","position","cards","display","gap","mainPlayerCards","backgroundColor","padding","borderRadius","tableCards","top","left","locations","PokerTable","props","_s","classes","gameCards","otherPlayerCards","assignOtherPlayerCardsPosition","areMainPlayerCards","otherPlayerNumber","bottom","right","className","sx","backgroundImage","require","children","style","suit","ranking","fileName","_jsxFileName","lineNumber","columnNumber","map","otherPlayer","index","flop","card","river","turn","_c","$RefreshReg$"],"sources":["/Users/merjf/Documents/Projects/accademic-tools-collector/atc-fe-common/src/components/MontecarloPokerSimulation/PokerTable.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { GameCards } from \"../../models/types\";\nimport PlayingCard from \"./PlayingCard\";\nimport classnames from \"classnames\";\n\nconst useStyles = makeStyles({\n    boxTable: {\n        width: \"100%\",\n        minHeight: 400,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: \"center\",\n        position: \"relative\"\n    },\n    cards: {\n        display: \"flex\",\n        gap: 2,\n        position: \"absolute\"\n    },\n    mainPlayerCards: {\n        backgroundColor: \"orange\",\n        padding: 5,\n        borderRadius: 5\n    },\n    tableCards: {\n        display: \"flex\",\n        gap: 5,\n        position: \"absolute\",\n        top: \"41%\",\n        left: \"29%\"\n    }\n});\n\ninterface PokerTableProps {\n    gameCards: GameCards\n}\n\nconst locations = [{\n\n}]\n\nconst PokerTable = (props: PokerTableProps) => {\n    const classes = useStyles();\n    const mainPlayerCards = props.gameCards.mainPlayerCards;\n    const tableCards = props.gameCards.tableCards;\n    const otherPlayerCards = props.gameCards.otherPlayerCards;\n\n    const assignOtherPlayerCardsPosition = (areMainPlayerCards:boolean, otherPlayerNumber:number) => {\n        if(areMainPlayerCards){\n            return {\n                bottom: 0,\n                left: \"42%\"\n            }\n        }\n        switch(otherPlayerNumber){\n            case 1: // dx center bottom\n                return {\n                    bottom: 30,\n                    left: \"62%\"\n                }\n            case 2: // sx center bottom\n                return {\n                    bottom: 30,\n                    left: \"20%\"\n                }\n            case 3: // sx center top\n                return {\n                    top: 30,\n                    left: \"30%\"\n                }\n            case 4: // dx center top\n                return {\n                    top: 30,\n                    left: \"55%\"\n                }\n            case 5: // sx bottom\n                return {\n                    bottom: \"28%\",\n                    left: 0\n                }\n            case 6: // dx bottom\n                return {\n                    bottom: \"28%\",\n                    right: 0\n                }\n            case 7: // dx top\n                return {\n                    top: \"22%\",\n                    right: 20\n                }\n            case 8: // sx top\n                return {\n                    top: \"22%\",\n                    left: 20\n                }\n        }\n    }\n\n    return(\n        <Box className={classes.boxTable} sx={{backgroundImage: `url(${require(\"../../assets/images/poker-table.jpeg\")})`}}>\n            <Box className={classnames(classes.cards, classes.mainPlayerCards)} style={assignOtherPlayerCardsPosition(true, 0)}>\n                <PlayingCard suit={mainPlayerCards.cards[0].suit} ranking={mainPlayerCards.cards[0].ranking} />\n                <PlayingCard suit={mainPlayerCards.cards[1].suit} ranking={mainPlayerCards.cards[1].ranking} />\n            </Box>\n            {otherPlayerCards.map((otherPlayer, index) => (\n                <Box className={classes.cards} style={assignOtherPlayerCardsPosition(false, index+1)}>\n                    <PlayingCard suit={otherPlayer.cards[0].suit} ranking={otherPlayer.cards[0].ranking} />\n                    <PlayingCard suit={otherPlayer.cards[1].suit} ranking={otherPlayer.cards[1].ranking} />\n                </Box>\n            ))}\n            <Box className={classes.tableCards}>\n                {tableCards.flop.map((card, index) => (\n                    <PlayingCard suit={card.suit} ranking={card.ranking} />\n                ))}\n                <PlayingCard suit={tableCards.river.suit} ranking={tableCards.river.ranking} />\n                <PlayingCard suit={tableCards.turn.suit} ranking={tableCards.turn.ranking} />\n            </Box>\n        </Box>\n    )\n}\n\nexport default PokerTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}