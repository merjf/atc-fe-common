{"ast":null,"code":"var _jsxFileName = \"/Users/merjf/Documents/Projects/accademic-tools-collector/atc-fe-common/src/components/MontecarloPokerSimulation/PokerTable.tsx\",\n  _s = $RefreshSig$();\nimport { Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport PlayingCard from \"./PlayingCard\";\nimport classnames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  boxTable: {\n    width: 720,\n    margin: \"auto\",\n    minHeight: 400,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundPosition: \"center\",\n    position: \"relative\"\n  },\n  cards: {\n    display: \"flex\",\n    gap: 2,\n    position: \"absolute\"\n  },\n  mainPlayerCards: {\n    backgroundColor: \"orange\",\n    padding: 5,\n    borderRadius: 5\n  },\n  tableCards: {\n    display: \"flex\",\n    gap: 5,\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"30%\"\n  }\n});\nconst locations = [{}];\nconst PokerTable = props => {\n  _s();\n  const classes = useStyles();\n  const mainPlayerCards = props.gameCards.mainPlayerCards;\n  const otherPlayerCards = props.gameCards.otherPlayerCards;\n  const fillCardsTable = () => {\n    let tableCards = props.gameCards.tableCards;\n    Array.from(Array(5 - props.gameCards.tableCards.cards.length)).map(i => {\n      tableCards.cards.push({});\n    });\n    return tableCards;\n  };\n  const tableCards = fillCardsTable();\n  const assignOtherPlayerCardsPosition = (areMainPlayerCards, otherPlayerNumber) => {\n    if (areMainPlayerCards) {\n      return {\n        bottom: 0,\n        left: \"42%\"\n      };\n    }\n    switch (otherPlayerNumber) {\n      case 1:\n        // dx center bottom\n        return {\n          bottom: 30,\n          left: \"62%\"\n        };\n      case 2:\n        // sx center bottom\n        return {\n          bottom: 30,\n          left: \"20%\"\n        };\n      case 3:\n        // sx center top\n        return {\n          top: 30,\n          left: \"30%\"\n        };\n      case 4:\n        // dx center top\n        return {\n          top: 30,\n          left: \"55%\"\n        };\n      case 5:\n        // sx bottom\n        return {\n          bottom: \"28%\",\n          left: 0\n        };\n      case 6:\n        // dx bottom\n        return {\n          bottom: \"28%\",\n          right: 0\n        };\n      case 7:\n        // dx top\n        return {\n          top: \"22%\",\n          right: 20\n        };\n      case 8:\n        // sx top\n        return {\n          top: \"22%\",\n          left: 20\n        };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.boxTable,\n    sx: {\n      backgroundImage: `url(${require(\"../../assets/images/poker-table.jpeg\")})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classnames(classes.cards, classes.mainPlayerCards),\n      style: assignOtherPlayerCardsPosition(true, 0),\n      children: [/*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: mainPlayerCards.cards[0].suit,\n        ranking: mainPlayerCards.cards[0].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: mainPlayerCards.cards[1].suit,\n        ranking: mainPlayerCards.cards[1].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), otherPlayerCards.map((otherPlayer, index) => /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.cards,\n      style: assignOtherPlayerCardsPosition(false, index + 1),\n      children: [/*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: otherPlayer.cards[0].suit,\n        ranking: otherPlayer.cards[0].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PlayingCard, {\n        suit: otherPlayer.cards[1].suit,\n        ranking: otherPlayer.cards[1].ranking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.tableCards,\n      children: tableCards.cards.map((card, index) => /*#__PURE__*/_jsxDEV(PlayingCard, {\n        skinCard: !card.ranking ? true : false,\n        suit: card.suit ? card.suit : undefined,\n        ranking: card.ranking ? card.ranking : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(PokerTable, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n_c = PokerTable;\nexport default PokerTable;\nvar _c;\n$RefreshReg$(_c, \"PokerTable\");","map":{"version":3,"names":["Box","makeStyles","PlayingCard","classnames","jsxDEV","_jsxDEV","useStyles","boxTable","width","margin","minHeight","backgroundRepeat","backgroundSize","backgroundPosition","position","cards","display","gap","mainPlayerCards","backgroundColor","padding","borderRadius","tableCards","top","left","locations","PokerTable","props","_s","classes","gameCards","otherPlayerCards","fillCardsTable","Array","from","length","map","i","push","assignOtherPlayerCardsPosition","areMainPlayerCards","otherPlayerNumber","bottom","right","className","sx","backgroundImage","require","children","style","suit","ranking","fileName","_jsxFileName","lineNumber","columnNumber","otherPlayer","index","card","skinCard","undefined","_c","$RefreshReg$"],"sources":["/Users/merjf/Documents/Projects/accademic-tools-collector/atc-fe-common/src/components/MontecarloPokerSimulation/PokerTable.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { GameCards } from \"../../models/types\";\nimport PlayingCard from \"./PlayingCard\";\nimport classnames from \"classnames\";\n\nconst useStyles = makeStyles({\n    boxTable: {\n        width: 720,\n        margin: \"auto\",\n        minHeight: 400,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n        backgroundPosition: \"center\",\n        position: \"relative\"\n    },\n    cards: {\n        display: \"flex\",\n        gap: 2,\n        position: \"absolute\"\n    },\n    mainPlayerCards: {\n        backgroundColor: \"orange\",\n        padding: 5,\n        borderRadius: 5\n    },\n    tableCards: {\n        display: \"flex\",\n        gap: 5,\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"30%\"\n    }\n});\n\ninterface PokerTableProps {\n    gameCards: GameCards\n}\n\nconst locations = [{\n\n}]\n\nconst PokerTable = (props: PokerTableProps) => {\n    const classes = useStyles();\n    const mainPlayerCards = props.gameCards.mainPlayerCards;\n    const otherPlayerCards = props.gameCards.otherPlayerCards;\n    const fillCardsTable = () => {\n        let tableCards = props.gameCards.tableCards;\n        Array.from(Array(5-props.gameCards.tableCards.cards.length)).map(i => {\n            tableCards.cards.push({})\n        });   \n        return tableCards;\n    }\n    const tableCards = fillCardsTable();\n\n    const assignOtherPlayerCardsPosition = (areMainPlayerCards:boolean, otherPlayerNumber:number) => {\n        if(areMainPlayerCards){\n            return {\n                bottom: 0,\n                left: \"42%\"\n            }\n        }\n        switch(otherPlayerNumber){\n            case 1: // dx center bottom\n                return {\n                    bottom: 30,\n                    left: \"62%\"\n                }\n            case 2: // sx center bottom\n                return {\n                    bottom: 30,\n                    left: \"20%\"\n                }\n            case 3: // sx center top\n                return {\n                    top: 30,\n                    left: \"30%\"\n                }\n            case 4: // dx center top\n                return {\n                    top: 30,\n                    left: \"55%\"\n                }\n            case 5: // sx bottom\n                return {\n                    bottom: \"28%\",\n                    left: 0\n                }\n            case 6: // dx bottom\n                return {\n                    bottom: \"28%\",\n                    right: 0\n                }\n            case 7: // dx top\n                return {\n                    top: \"22%\",\n                    right: 20\n                }\n            case 8: // sx top\n                return {\n                    top: \"22%\",\n                    left: 20\n                }\n        }\n    }\n\n    return(\n        <Box className={classes.boxTable} sx={{backgroundImage: `url(${require(\"../../assets/images/poker-table.jpeg\")})`}}>\n            <Box className={classnames(classes.cards, classes.mainPlayerCards)} style={assignOtherPlayerCardsPosition(true, 0)}>\n                <PlayingCard suit={mainPlayerCards.cards[0].suit} ranking={mainPlayerCards.cards[0].ranking} />\n                <PlayingCard suit={mainPlayerCards.cards[1].suit} ranking={mainPlayerCards.cards[1].ranking} />\n            </Box>\n            {otherPlayerCards.map((otherPlayer, index) => (\n                <Box className={classes.cards} style={assignOtherPlayerCardsPosition(false, index+1)} key={index}>\n                    <PlayingCard suit={otherPlayer.cards[0].suit} ranking={otherPlayer.cards[0].ranking} />\n                    <PlayingCard suit={otherPlayer.cards[1].suit} ranking={otherPlayer.cards[1].ranking} />\n                </Box>\n            ))}\n            <Box className={classes.tableCards}>\n                {tableCards.cards.map((card, index) => (\n                    <PlayingCard\n                        skinCard={!card.ranking ? true : false}\n                        suit={card.suit ? card.suit : undefined}\n                        ranking={card.ranking ? card.ranking : undefined}\n                    />\n                ))}\n            </Box>\n        </Box>\n    )\n}\n\nexport default PokerTable;"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,eAAe;AACnC,SAASC,UAAU,QAAQ,aAAa;AAExC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,SAAS,GAAGL,UAAU,CAAC;EACzBM,QAAQ,EAAE;IACNC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,MAAM;IACdC,SAAS,EAAE,GAAG;IACdC,gBAAgB,EAAE,WAAW;IAC7BC,cAAc,EAAE,SAAS;IACzBC,kBAAkB,EAAE,QAAQ;IAC5BC,QAAQ,EAAE;EACd,CAAC;EACDC,KAAK,EAAE;IACHC,OAAO,EAAE,MAAM;IACfC,GAAG,EAAE,CAAC;IACNH,QAAQ,EAAE;EACd,CAAC;EACDI,eAAe,EAAE;IACbC,eAAe,EAAE,QAAQ;IACzBC,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE;EAClB,CAAC;EACDC,UAAU,EAAE;IACRN,OAAO,EAAE,MAAM;IACfC,GAAG,EAAE,CAAC;IACNH,QAAQ,EAAE,UAAU;IACpBS,GAAG,EAAE,KAAK;IACVC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AAMF,MAAMC,SAAS,GAAG,CAAC,CAEnB,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAIC,KAAsB,IAAK;EAAAC,EAAA;EAC3C,MAAMC,OAAO,GAAGvB,SAAS,CAAC,CAAC;EAC3B,MAAMY,eAAe,GAAGS,KAAK,CAACG,SAAS,CAACZ,eAAe;EACvD,MAAMa,gBAAgB,GAAGJ,KAAK,CAACG,SAAS,CAACC,gBAAgB;EACzD,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIV,UAAU,GAAGK,KAAK,CAACG,SAAS,CAACR,UAAU;IAC3CW,KAAK,CAACC,IAAI,CAACD,KAAK,CAAC,CAAC,GAACN,KAAK,CAACG,SAAS,CAACR,UAAU,CAACP,KAAK,CAACoB,MAAM,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAI;MAClEf,UAAU,CAACP,KAAK,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;IACF,OAAOhB,UAAU;EACrB,CAAC;EACD,MAAMA,UAAU,GAAGU,cAAc,CAAC,CAAC;EAEnC,MAAMO,8BAA8B,GAAGA,CAACC,kBAA0B,EAAEC,iBAAwB,KAAK;IAC7F,IAAGD,kBAAkB,EAAC;MAClB,OAAO;QACHE,MAAM,EAAE,CAAC;QACTlB,IAAI,EAAE;MACV,CAAC;IACL;IACA,QAAOiB,iBAAiB;MACpB,KAAK,CAAC;QAAE;QACJ,OAAO;UACHC,MAAM,EAAE,EAAE;UACVlB,IAAI,EAAE;QACV,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHkB,MAAM,EAAE,EAAE;UACVlB,IAAI,EAAE;QACV,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHD,GAAG,EAAE,EAAE;UACPC,IAAI,EAAE;QACV,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHD,GAAG,EAAE,EAAE;UACPC,IAAI,EAAE;QACV,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHkB,MAAM,EAAE,KAAK;UACblB,IAAI,EAAE;QACV,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHkB,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE;QACX,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHpB,GAAG,EAAE,KAAK;UACVoB,KAAK,EAAE;QACX,CAAC;MACL,KAAK,CAAC;QAAE;QACJ,OAAO;UACHpB,GAAG,EAAE,KAAK;UACVC,IAAI,EAAE;QACV,CAAC;IACT;EACJ,CAAC;EAED,oBACInB,OAAA,CAACL,GAAG;IAAC4C,SAAS,EAAEf,OAAO,CAACtB,QAAS;IAACsC,EAAE,EAAE;MAACC,eAAe,EAAG,OAAMC,OAAO,CAAC,sCAAsC,CAAE;IAAE,CAAE;IAAAC,QAAA,gBAC/G3C,OAAA,CAACL,GAAG;MAAC4C,SAAS,EAAEzC,UAAU,CAAC0B,OAAO,CAACd,KAAK,EAAEc,OAAO,CAACX,eAAe,CAAE;MAAC+B,KAAK,EAAEV,8BAA8B,CAAC,IAAI,EAAE,CAAC,CAAE;MAAAS,QAAA,gBAC/G3C,OAAA,CAACH,WAAW;QAACgD,IAAI,EAAEhC,eAAe,CAACH,KAAK,CAAC,CAAC,CAAC,CAACmC,IAAK;QAACC,OAAO,EAAEjC,eAAe,CAACH,KAAK,CAAC,CAAC,CAAC,CAACoC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/FlD,OAAA,CAACH,WAAW;QAACgD,IAAI,EAAEhC,eAAe,CAACH,KAAK,CAAC,CAAC,CAAC,CAACmC,IAAK;QAACC,OAAO,EAAEjC,eAAe,CAACH,KAAK,CAAC,CAAC,CAAC,CAACoC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F,CAAC,EACLxB,gBAAgB,CAACK,GAAG,CAAC,CAACoB,WAAW,EAAEC,KAAK,kBACrCpD,OAAA,CAACL,GAAG;MAAC4C,SAAS,EAAEf,OAAO,CAACd,KAAM;MAACkC,KAAK,EAAEV,8BAA8B,CAAC,KAAK,EAAEkB,KAAK,GAAC,CAAC,CAAE;MAAAT,QAAA,gBACjF3C,OAAA,CAACH,WAAW;QAACgD,IAAI,EAAEM,WAAW,CAACzC,KAAK,CAAC,CAAC,CAAC,CAACmC,IAAK;QAACC,OAAO,EAAEK,WAAW,CAACzC,KAAK,CAAC,CAAC,CAAC,CAACoC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvFlD,OAAA,CAACH,WAAW;QAACgD,IAAI,EAAEM,WAAW,CAACzC,KAAK,CAAC,CAAC,CAAC,CAACmC,IAAK;QAACC,OAAO,EAAEK,WAAW,CAACzC,KAAK,CAAC,CAAC,CAAC,CAACoC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFAE,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG3F,CACR,CAAC,eACFlD,OAAA,CAACL,GAAG;MAAC4C,SAAS,EAAEf,OAAO,CAACP,UAAW;MAAA0B,QAAA,EAC9B1B,UAAU,CAACP,KAAK,CAACqB,GAAG,CAAC,CAACsB,IAAI,EAAED,KAAK,kBAC9BpD,OAAA,CAACH,WAAW;QACRyD,QAAQ,EAAE,CAACD,IAAI,CAACP,OAAO,GAAG,IAAI,GAAG,KAAM;QACvCD,IAAI,EAAEQ,IAAI,CAACR,IAAI,GAAGQ,IAAI,CAACR,IAAI,GAAGU,SAAU;QACxCT,OAAO,EAAEO,IAAI,CAACP,OAAO,GAAGO,IAAI,CAACP,OAAO,GAAGS;MAAU;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAA3B,EAAA,CAvFKF,UAAU;EAAA,QACIpB,SAAS;AAAA;AAAAuD,EAAA,GADvBnC,UAAU;AAyFhB,eAAeA,UAAU;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}